export type "unit"    = byte[0]
export type "bool"    = byte[1]
export type "byte"    = byte[1]
export type "char"    = byte[4]
export type "int"     = byte[4]
export type "long"    = byte[8]
export type "float"   = byte[4]
export type "double"  = byte[8]
export type "address" = byte[8]
export type "instruction" = byte[4]

export invisible class "RTUObject" {}

export invisible class "RTTObject" {
    .type       "core::address"
}

export class "Type" {
    .size       "core::long"
    .maker      "core::address"
    .collector  "core::address"
}

export class "NamedType" extends "core::Type" {
    .name       "core::address"
}

export class "Class" extends "core::NamedType" {
    .members         "core::address"
    .methods         "core::address"
    .static_members  "core::address"
    .static_methods  "core::address"
}


export class "FFamily" extends "core::RTTObject" {
    .base_addr  "core::address"
    .overrides  "core::address"
}

export class "FOverride" extends "core::Type" {
    .param_types    "core::address"
    .return_type    "core::address"

    func "maker"
    func "collector"
}

export class "Array" extends "core::Type" {
    .element_type   "core::address"
    .length         "core::long"

    func "maker"
    func "collector"
}

export invisible class "MemberInfo" {
    .name   "core::address"
    .type   "core::address"
    .offset "core::long"
}

export func {
    param ["core::address"]
    implement "core::RTUObject::()"
} as "RTUObject::()"
export func {
    param ["core::address"]
    implement "core::RTUObject::~()"
} as "RTUObject::~()"

export func {
    param ["core::address", "core::address"]
    implement "core::RTTObject::()"
} as "RTTObject::()"
export func {
    param ["core::address"]
    implement "core::RTTObject::~()"
} as "RTTObject::~()"

export func {
    param ["core::address", "core::address", "core::long", "core::address", "core::address"]
    implement "core::Type::()"
} as "Type::()"
export func {
    param ["core::address"]
    implement "core::Type::~()"
} as "Type::~()"

export func {
    param ["core::address", "core::address", "core::address", "core::long"]
    implement "core::Array::()"
} as "Array::()"
export func {
    param ["core::address"]
    implement "core::Array::~()"
} as "Array::~()"
export func {
    param ["core::address", "core::address"]
    implement "core::Array::maker"
} as "Array::maker"
export func {
    param ["core::address", "core::address"]
    implement "core::Array::collector"
} as "Array::collector"

export func {
    param ["core::address", "core::address", "core::long", "core::address", "core::address", "core::address"]
    implement "core::NamedType::()"
} as "NamedType::()"
export func {
    param ["core::address"]
    implement "core::NamedType::~()"
} as "NamedType::~()"

export func {
    param ["core::address", "core::address", "core::address", "core::address", "core::long"]
    implement "core::MemberInfo::()"
} as "MemberInfo::()"
export func {
    param ["core::address"]
    implement "core::MemberInfo::~()"
} as "MemberInfo::~()"

export func {
    param ["core::address", "core::address", "core::long", "core::address", "core::address", "core::address", "core::address", "core::address", "core::address", "core::address"]
    implement "core::Class::()"
} as "Class::()"
export func {
    param ["core::address"]
    implement "core::Class::~()"
} as "Class::~()"

export func {
    param ["core::address", "core::address", "core::bool", "core::address"]
    implement "core::FOverride::()"
} as "FOverride::()"

export func {
    param ["core::address"]
    implement "core::FOverride::~()"
} as "FOverride::~()"

export func {
    param ["core::address", "core::address", "core::bool", "core::address"]
    implement "core::FOverride::maker"
} as "FOverride::maker"

export func {
    param ["core::address", "core::address"]
    implement "core::FOverride::collector"
} as "FOverride::collector"

export func {
    param ["core::address", "core::address", "core::address", "core::address"]
    implement "core::FFamily::()"
} as "FFamily::()"

export func {
    param ["core::address"]
    implement "core::FFamily::~()"
} as "FFamily::~()"

export func {
    param ["core::address"]
    implement "core::unit::()"
} as "unit::()"

export func {
    param ["core::address"]
    implement "core::unit::~()"
} as "unit::~()"

export func {
    param ["core::address", "core::bool"]
    implement "core::bool::()"
} as "bool::()"

export func {
    param ["core::address"]
    implement "core::bool::~()"
} as "bool::~()"

export func {
    param ["core::address", "core::byte"]
    implement "core::byte::()"
} as "byte::()"

export func {
    param ["core::address"]
    implement "core::byte::~()"
} as "byte::~()"

export func {
    param ["core::address", "core::char"]
    implement "core::char::()"
} as "char::()"

export func {
    param ["core::address"]
    implement "core::char::~()"
} as "char::~()"

export func {
    param ["core::address", "core::int"]
    implement "core::int::()"
} as "int::()"

export func {
    param ["core::address"]
    implement "core::int::~()"
} as "int::~()"

export func {
    param ["core::address", "core::long"]
    implement "core::long::()"
} as "long::()"

export func {
    param ["core::address"]
    implement "core::long::~()"
} as "long::~()"

export func {
    param ["core::address", "core::float"]
    implement "core::float::()"
} as "float::()"

export func {
    param ["core::address"]
    implement "core::float::~()"
} as "float::~()"

export func {
    param ["core::address", "core::double"]
    implement "core::double::()"
} as "double::()"

export func {
    param ["core::address"]
    implement "core::double::~()"
} as "double::~()"

export func {
    param ["core::address", "core::address"]
    implement "core::address::()"
} as "address::()"

export func {
    param ["core::address"]
    implement "core::address::~()"
} as "address::~()"

export func {
    param ["core::address", "core::byte", "core::int"]
    implement "core::instruction::()"
} as "instruction::()"

export func {
    param ["core::address"]
    implement "core::instruction::~()"
} as "instruction::~()"


